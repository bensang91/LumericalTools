addpath('C:/Users/Michael Nickerson/Documents/IPL/Code/Lumerical/common');  # LABDESK
addpath('/home/nickersonm/lumerical/common');   # Cluster
addpath('E:/Nickerson/Lumerical/common');   # LABSIM
util_fCommon;    # Load common functions

### Build a 2D plan-view EME design
## Units: µm lengths, cm^-1 loss, 1e18 cm^-3 doping
## Inputs as defined variables:
# Required:
#   none
# Optional:
#   inMode:     [y,Ez] input TM mode profile, default fundamental TM mode
#   inRot:      input mode rotation around z axis in degrees, default 0
#   outMode:    [y,Ez] output TM mode profile, default fundamental TM mode
#   outRot:     output mode rotation around z axis in degrees, default 0
#   wgDef:      if present, will add cells for each waveguide x-extent
#   simCenter:  [x,y] center of simulation, default center of geometric extent
#   simX:       longitudinal simulation span, default enclosing geometric extent
#   simY:       transverse simulation span, default enclosing geometric extent
#   simZ:       transverse simulation span, default 1µm
#   simBuffer:  buffers for mesh, etc, default 0.5µm
#   simPML:     number of mesh-periods for PML border, default 8
#   simModes:   number of modes to search; linearly impacts memory, default 200
#   simRes:     mesh size in normal regions [um], can be matrix of [res,yMin,yMax,[xMin,xMax]]; default 0.1
#   simCellLen: list of simulation supercell x-extents, can be [xMin,xMax] matrix; auto-generated if wgDef present
#   simCellRes: size of simulation cells, can be vector corresponding to simCellLen; default 5µm
#   simCellN:   number of simulation cells, can be vector corresponding to simCellLen; overwrites simCellRes
#   simBend:    enable bend radius for given segments, [xMin, xMax, radius]



### Set defaults if needed
simVars = 'inRot,outRot,simZ,simBuffer,simPML,simModes';
dVals = '0,0,1,0.5,8,200';
dVars = simVars; dRequired = '';
util_paramDefaults;

um = 1e-6;
lambda = 1.03;  # Hardcoded for now

# Defaults that optionally have more complex passing; required here to avoid complexity in structure simulation
if( ~exist('simRes') ) { simRes = 0.1; }
if( ~exist('simCellRes') ) { simCellRes = 5; }


## Derived parameters
# Find maximum extent of geometry
rMin = [0,0]; rMax = [0,0];
selectpartial(selectGeom() + "::");
for(i = 1:(getnumber())) {
    vtx = msub( get('vertices', i), -[get('x', i), get('y', i)] );
    rMin(1) = min([rMin(1); vtx(:,1)]);
    rMin(2) = min([rMin(2); vtx(:,2)]);
    rMax(1) = max([rMax(1); vtx(:,1)]);
    rMax(2) = max([rMax(2); vtx(:,2)]);
}
rMin = rMin/um; rMax = rMax/um;
if( ~exist('simX') ) { simX = rMax(1)-rMin(1); }
if( ~exist('simY') ) { simY = rMax(2)-rMin(2); }
if( ~exist('simCenter') ) { simCenter = (rMin + rMax)/2; }

# Contrary to the manual, mesh size = min(global, override)
#   So here we assign resGlobal = max(all res) and set override everywhere else
if(size(simRes,1) > 1) {
    resGlobal = max(simRes(:,1));
} else {
    resGlobal = simRes;
}

# Add xMin, xMax to simRes if needed
if( (size(simRes,2) > 2) & (size(simRes,2) < 5) ) {
    simRes = [simRes, zeros(size(simRes,1),1), ones(size(simRes,1),1) * simX];
}

# Remove NaNs (nan ~= nan)
simRes = simRes(find( prod(simRes==simRes,2) ~= 0), :);

# Remove zero-extent groups
if( size(simRes,2) >= 5) {
    simRes = simRes(find( (simRes(:,3)-simRes(:,2))*(simRes(:,5)-simRes(:,4)) ~= 0),:);
}

# Build cell groups if needed and possible
if(~exist('simCellLen')) {
    simCellLen = [0,simX];
    if( exist('wgDef') ) {
        for( i=1:length(wgDef)) {
            simCellLen = [simCellLen; wgDef{i}.start(1), wgDef{i}.end(1)];
        }
        # TODO: auto-generate simCellN based on waveguide slope?
    } else {
        simCellLen = simX;
    }
}

# Add cell length groups if needed so bend segments comprise discrete groups
if( exist('simBend') ) {
    # Make sure the ordering is correct
    simBend = [amin(simBend(:,1:2), 2), amax(simBend(:,1:2), 2), simBend(:,3)];
    
    # simCellLen needs to be in [xMin, xMax] format for this
    if( max(size(simCellLen)) == length(simCellLen) ) {
        simCellLen = cumsum(simCellLen(:));
        simCellLen = [simCellLen(1:(end-1)), simCellLen(2:end)];
    }
    
    # Insert bend radius groups and N=2 minimum cell number
    simCellLen = [simCellLen; simBend(:,1:2)];
    simCellN = [simCellN(:); ones(size(simBend,1), 1)*2];
}

# Normalize simCellLen to list of non-overlapping lengths if in [xMin,xMax] format
if( min(size(simCellLen)) < length(simCellLen) ) {
    # Remove zero-extent groups from simCellN
    if( exist('simCellN') ) {
        if( length(simCellN) > 1 ) {
            simCellN = simCellN(find(simCellLen(:,1) ~= simCellLen(:,2)));
        }
    }
    
    # Remove zero-extent groups
    simCellLen = simCellLen(find(simCellLen(:,1) ~= simCellLen(:,2)),:);
    
    # Make sure min and max are correctly ordered
    simCellLen = [amin(simCellLen, 2), amax(simCellLen, 2)];
    
    # Calculate unique cell boundaries and sort
    cellBoundaries = unique(simCellLen(:));
    
    # Change simCellLen to actual list of lengths
    simCells = simCellLen;
    simCellLen = simCells(:,2) - simCells(:,1);
    
    # Convert cell number to size because we're reshaping potentially overlapping regions
    if( exist('simCellN') ) {
        simCellRes = simCellLen / simCellN;
    }
    
    # Create unique simCellLen
    simCellLen = cellBoundaries(2:end) - cellBoundaries(1:(end-1));
    
    # Build appropriate simCellN for each unique cell boundary region
    simCellN = ones(size(simCellLen,1));
    if( length(simCellRes) > 1 ) {
        # Can vectorize this and nest more, but it's clearer in a loop
        for( i=1:(length(cellBoundaries)-1) ) {
            overlapCells = find( (cellBoundaries(i) >= simCells(:,1)) & (cellBoundaries(i+1) <= simCells(:,2)) );
            simCellN(i) = ceil(simCellLen(i) / min( simCellRes(overlapCells) ));
        }
        clear(overlapCells);
    } else { simCellN = ceil(simCellLen/simCellRes); }
    
    clear(cellBoundaries);
}

# Use simCellN instead of simCellRes
if(~exist('simCellN')) {
    simCellN = ceil(simCellLen/simCellRes);
}

# Find which cell groups need bend radii if specified, and convert simBend to [groupN, radius]
if( exist('simBend') ) {
    cellBoundaries = [0; cumsum(simCellLen(:))];
    
    # Find all groups that overlap this bend radius requirement
    # Can vectorize this, but it's clearer in a loop
    bendGroups = [0, 0];
    for( i=1:size(simBend,1) ) {
        overlapCells = find( (cellBoundaries(1:(end-1)) >= simBend(i, 1)) & (cellBoundaries(2:end) <= simBend(i, 2)) );
        bendGroups = [bendGroups; overlapCells, ones(length(overlapCells))*simBend(i,3)];
    }
    bendGroups = bendGroups(2:end,:);
    
    # Now must convert group number to number of FIRST cell in the group, because of EME strangeness: cell group custom properties set by selecting FIRST cell only
    # See https://support.lumerical.com/hc/en-us/articles/360034929113
    firstCellN = cumsum(simCellN) - simCellN + 1;
    bendGroups(:,1) = firstCellN(bendGroups(:,1));
    simBend = bendGroups;
    
    clear(cellBoundaries, firstCellN, bendGroups);
}



### Function definitions
# Add a mesh rectangle
function addMeshRect(group, name, res, yMin, yMax, xMin, xMax, zSpan) {
    addmesh; set("name", name); set("z", 0); set("z span", zSpan*1e-6);
    set("y max", max([yMin, yMax]*1e-6)); set("y min", min([yMin, yMax]*1e-6));
    set("x max", max([xMin, xMax]*1e-6)); set("x min", min([xMin, xMax]*1e-6));
    set("override x mesh", 0); set("override z mesh", 0);
    set("dy", res*1e-6);
    addtogroup(group);
}



### Add mesh constraints
geoGroup = selectGeom();
addgroup; set("name", 'waveguideMesh'); set("x", 0); set("y", 0); set("z", 0);
addtogroup(geoGroup);
geoGroup = geoGroup + '::waveguideMesh';

# Just iterate through mesh list
for(i=1:size(simRes, 1)) {
    if(simRes(i,1) ~= resGlobal) {
        addMeshRect(geoGroup, 'mesh'+num2str(i), simRes(i, 1), 
                    min(simRes(i, 2:3))-simBuffer, max(simRes(i, 2:3))+simBuffer, 
                    min(simRes(i, 4:5))-simBuffer, max(simRes(i, 4:5))+simBuffer, simZ);
    }
}



### Add simulation
# Add solver if it doesn't exist; using try to work inside setup scripts
solver = ""; try { solver = getactivesolver; } catch(errMsg);
if(solver ~= "EME") { select("::model"); try{addeme;} catch(errMsg); }
solver = "::model::EME";

# Cell properties
setnamed(solver, 'number of cell groups', length(simCellLen));
setnamed(solver, 'group spans', simCellLen*um);
setnamed(solver, 'cells', simCellN);
setnamed(solver, 'subcell method', 1 + 0*simCellLen);
setnamed(solver, 'display cells', 1);


## Main solver
# Solver properties
setnamed(solver, "wavelength", lambda*um);
setnamed(solver, "solver type", "2D XY plane: X prop");
setnamed(solver, "define y mesh by", "maximum mesh step"); setnamed(solver, "dy", resGlobal*um); 

# Boundary conditions
setnamed(solver, "y min bc", "PML"); setnamed(solver, "y max bc", "PML");
setnamed(solver, "pml layers", simPML);

# Calculation parameters
setnamed(solver, "number of modes for all cell groups", simModes);
setnamed(solver, "max stored modes", simModes * 2 );

# Simulation boundaries
setnamed(solver, "z", 0);
setnamed(solver, "y", simCenter(2)*um);
setnamed(solver, "y span", (simY - (simPML*resGlobal + simBuffer))*um);    # Slightly inset from edges
setnamed(solver, "x min", rMin(1)*um);


## Bend radii groups
# Comes after main solver properties as it alters solver settings
if( exist('simBend') ) {
    setnamed(solver, 'allow custom eigensolver settings', 1);
    for( i=1:size(simBend,1) ) {
        select( solver+'::Cells::cell_'+num2str(simBend(i,1),'%i') );
        seteigensolver( 'bent waveguide', 1 );
        seteigensolver( 'bend radius', simBend(i,2)*um );
    }
}



### Modify ports
## Input port
port = solver+'::Ports::port_1';
# Basic settings
setnamed(port, 'z span', simZ*um);
setnamed(port, 'mode selection', 'fundamental TM mode');

# Mode profile: build EM field if specified, [y, Ez]
if(exist('inMode')) {
    if( size(inMode) > [2,1] ) {
        yv = inMode(:,1);
        Ez = inMode(:,2);
        
        # Apply rotation
        th = inRot*2*pi/360;
        dPhi = 2*pi*yv*sin(th)/1.03;
        Ez = Ez * ( cos(dPhi) + 1i*sin(dPhi) );
        
        # Generate dataset with specified profile
        EM = rectilineardataset("EM fields",[0],yv*um,[0]);
        EM.addparameter("lambda",lambda*um,"f",c/(lambda*um));
        EM.addattribute("E",0*Ez,0*Ez,Ez);
        EM.addattribute("H",sqrt(eps0/mu0)*Ez*sin(th),-sqrt(eps0/mu0)*Ez*cos(th),0*Ez);
        
        # Select and import dataset
        setnamed(port, 'mode selection', 'user import');
        select(port);
        importdataset(EM);
        
        # Cleanup
        clear(Ez, yv);
    }
}


## Output port
port = solver+'::Ports::port_2';
# Basic settings
setnamed(port, 'z span', simZ*um);
setnamed(port, 'mode selection', 'fundamental TM mode');

# Mode profile: build EM field if specified, [y, Ez]
if(exist('outMode')) {
    if( size(outMode) > [2,1] ) {
        yv = outMode(:,1);
        Ez = outMode(:,2);
        
        # Apply rotation
        th = outRot*2*pi/360;
        dPhi = 2*pi*yv*sin(th)/1.03;
        Ez = Ez * ( cos(dPhi) + 1i*sin(dPhi) );
        
        # Generate dataset with specified profile
        EM = rectilineardataset("EM fields",[0],yv*um,[0]);
        EM.addparameter("lambda",lambda*um,"f",c/(lambda*um));
        EM.addattribute("E",0*Ez,0*Ez,Ez);
        EM.addattribute("H",sqrt(eps0/mu0)*Ez*sin(th),-sqrt(eps0/mu0)*Ez*cos(th),0*Ez);
        
        # Select and import dataset
        setnamed(port, 'mode selection', 'user import');
        select(port);
        importdataset(EM);
        
        # Cleanup
        clear(Ez, yv);
    }
}



### Monitors
## Simulation plane
select(solver); addemeprofile;
set('name', 'planarField'); mon = 'planarField';
setnamed(mon, 'monitor type', '2D Z-normal');
setnamed(mon, 'use relative coordinates', 0);
setnamed(mon, "x", simCenter(1)*um); setnamed(mon, "y", simCenter(2)*um); setnamed(mon, "z", 0);
setnamed(mon, "y span", (simY - (simPML*resGlobal + simBuffer))*um);    # Slightly inset from edges
setnamed(mon, 'x span', simX*um);
setnamed(mon, 'x resolution', 400);


## Input and output fields
# Input field
select(solver); addemeprofile;
set('name', 'inputField'); mon = 'inputField';
setnamed(mon, 'monitor type', '2D X-normal');
setnamed(mon, 'use relative coordinates', 0);
setnamed(mon, "x", getnamed(solver, "x min") + 0.1*um); setnamed(mon, "y", simCenter(2)*um); setnamed(mon, "z", 0);
setnamed(mon, "y span", (simY - (simPML*resGlobal + simBuffer))*um);    # Slightly inset from edges

# Output field
select(solver); addemeprofile;
set('name', 'outputField'); mon = 'outputField';
setnamed(mon, 'monitor type', '2D X-normal');
setnamed(mon, 'use relative coordinates', 0);
setnamed(mon, "x", getnamed(solver, "x min") + (simX-0.1)*um); setnamed(mon, "y", simCenter(2)*um); setnamed(mon, "z", 0);
setnamed(mon, "y span", (simY - (simPML*resGlobal + simBuffer))*um);    # Slightly inset from edges



### Cleanup temporary variables
errMsg = ''; Ez = 0; Hy = 0; EM = 0;
clear(i, vtx, solver, rMax, rMin, errMsg, port, Ez, Hy, EM, mon, geoGroup);
