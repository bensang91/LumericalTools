addpath('C:/Users/Michael Nickerson/Documents/IPL/Code/Lumerical/common');  # LABDESK
addpath('/home/nickersonm/lumerical/common');   # Cluster
addpath('E:/Nickerson/Lumerical/common');   # LABSIM
util_fCommon;    # Load common functions

### Build specified constant-width waveguides in an EME simulation
## Units: um lengths, cm^-1 loss, 1e18 cm^-3 doping
## Inputs as defined variables:
# Required:
#   wgDef:      cell list of waveguides, each element being a structure with fields:
#       .material:  material that exists in project, presumably set by EME2D_buildMaterial
#       .width:     width of the waveguide, unused if .start is specified
#       .length:    length of the waveguide, unused if .end is specified
#     Optional wgDef fields:
#       .start:     [x0,y0,w0] start location and width, default prev.end or [0,0,width]
#       .end:       [x1,y1,w1] end location and width, default start+[length,0,0]
#       .name:      name for the waveguide object, default 'wg#'
#       .res:       minimum y-resolution for this waveguide; will generate simRes matrix, can be [res,yMin,yMax,xMin,xMax]
#       .cells      number of cells for this waveguide; will generate simCellLen and simCellN matrix



### Set defaults if needed
dVals = ''; dVars = ''; dRequired = 'matNames,wgDef';
util_paramDefaults;

um=1e-6;



### Initialize
try { switchtolayout; } catch(errMsg);
select("::model"); deleteall;



### Functions
## wgPolyPoints: get polygon points for waveguide
# Inputs:
#   v0: [x0,y0,w0] start waveguide
#   v1: [x1,y1,w1] end waveguide
#   n:  number of points, suggested 200
function wgPolyPoints(v0, v1, n) {
    r0 = v0(1,2); w0 = v0(3);
    r1 = [v1(1), v1(2)]; w1 = v1(3);
    
    # If straight, return immediately with just the four corners
    if ( ( v0(1,3) == v1(1,3) ) | ( v0(1,3) == v1(1,3) ) ) {
        return [  r0+[0, w0/2];
                  r1+[0, w1/2];
                  r1+[0, -w1/2];
                  r0+[0, -w0/2] ];
    }
    
    # Generate raised-sine centerline and width
    x = linspace(v0(1), v1(1), n); dx = x(2)-x(1);
    dY = v1(2) - v0(2);
    y = sCurveRaisedSine(x, dY);
    dy = dRaisedSine(x, dY);
    w = sCurveRaisedSine(x, (w1 - w0)) + w0;
    
    # Calculate y-offsets considering angle
    # Simple geometric calculation for now
    yW = (w/2) * sqrt(dx^2 + dy^2)/dx;
    
    return [x, y+yW; flip([x, y-yW],1)];
}


## Initialize
geoGroup = selectGeom();
set('x', 0); set('y', 0); set('z', 0);



### Build Waveguides
for ( i = 1:length(wgDef) ) {
    wg = wgDef{i};
    if (isstruct(wg)) { # Ignore non-structures
        ## Check for required fields
        if ( ~isfield(wg, 'name') ) { wg.name = 'wg'+num2str(i); }
        if ( ~isfield(wg, 'material') ) {
            ?('Error: waveguide "'+wg.name+'" has no material defined!'); break;
        }
        
        # Potentially optional fields; generate if not defined, error if not possible
        if ( ~isfield(wg, 'start') ) {
            if ( i>1 ) { wg.start = wgDef{i-1}.end; } else { wg.start = [0,0,0]; }
            if ( ~isfield(wg, 'width') ) {
                if (i==1) {
                    ?('Error: waveguide "'+wg.name+'" has no width defined!'); break;
                } else {
                    wg.width = wgDef{i-1}.end(3);
                }
            } else {
                wg.start(3) = wg.width;
            }
        }
        if ( ~isfield(wg, 'end') ) {
            if ( ~isfield(wg, 'length') ) {
                ?('Error: waveguide "'+wg.name+'" has no length defined!');
                break;
            } else { wg.end = wg.start + [wg.length,0,0]; }
        } else {
            wg.length = wg.end(1) - wg.start(1);
        }
        
        # Calculate waveguide
        r0 = [wg.start(1), wg.start(2), 0];
        wgPoly = wgPolyPoints(wg.start - r0, wg.end - r0, 200);
        
        
        ## Add the waveguide and set the properties if not vanishingly small
        if ( wg.length > 0 ) {
            selectGeom(); addpoly; addtogroup(geoGroup);
            set('name', wg.name);
            set('x', wg.start(1)*um); set('y', wg.start(2)*um); set('z', 0); set('z span', um);
            set('material', wg.material);
            set('vertices', wgPoly*um);
        }
        
        # Add to simRes if .res specified
        if ( isfield(wg, 'res') ) {
            if (size(wg.res,2) < 3) {
                wg.res = [wg.res(1), [min(wgPoly(:,2)), max(wgPoly(:,2))]+r0(2) ];
            }
            if (size(wg.res,2) == 3) {
                wg.res = [wg.res, [min(wgPoly(:,1)), max(wgPoly(:,1))]+r0(1) ];
            }
            if ( ~exist('simRes') ) {
                simRes = wg.res;
            } else {
                if (size(simRes,2) ~= 5) {
                    simRes = [simRes, zeros(size(simRes,1), 5-size(simRes,2))];
                }
                simRes = [simRes; wg.res];
            }
        }
        
        # Add to simCellLen and simCellN if specified
        if ( isfield(wg, 'cells') ) {
            if ( ~exist('simCellLen') ) {
                simCellLen = [wg.start(1), wg.end(1)];
                simCellN = wg.cells;
            } else {
                simCellLen = [simCellLen; wg.start(1), wg.end(1)];
                simCellN = [simCellN, wg.cells];
            }
        }
        
        # Update structure for later use
        wgDef{i} = wg;
    }
}


## Remove zero-span waveguides from definition
empty = zeros(length(wgDef),1);
for ( i = 1:length(wgDef) ) {
    empty(i) = ~(wgDef{i}.length > 0);
}
wgDef = wgDef{find(~empty)};


## Cleanup temporary variables
clear(i, wg, geoGroup, r0, wgPoly);
