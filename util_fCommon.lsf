### Common helper function definitions

## Determine which IDE we're operating in by looking for known command
#   Returns '1' if this is the FDE IDE, '0' if this is DEVICE
function isFDE() {
    return (findstring(getcommands, "addeme\n") > 0);
}
function isDEVICE() {
    return ~isFDE();
}


## General cumulative sum function, sums down columns
function cumsum(v) {
    s = matrix(size(v,1),size(v,2));
    for (i=1:size(v,1)) {
        s(i,:) = sum(v(1:i,:),1);
    }
    return s;
}


## Find x in cell array C
function findcell(x, C) {
    if ( ~iscell(C) ) { ?('"findcell" not passed a cell!'); break; }
    for (i=1:length(C)) {
        if (x == C{i}) { return i; }
    }
    return 0;
}


## Select geometry; create if doesn't exist (e.g. in MODE)
function selectGeom() {
    if (getnamednumber('::model::geometry') < 1) {
        select('::model');
        addgroup; set('name', 'geometry');
    }
    select("::model::geometry");
    return '::model::geometry';
}


## Matrix subtraction
function msub(m1, m2) {
    if (size(m1,2) == size(m2,2)) {
        j = 2;
    } else if (size(m1,1) == size(m2,1)) {
        j = 1;
    } else {
        ?'msub: No dimensions match!'; break;
    }
    
    for ( i=1:size(m1, j) ) {
        if (j==2) {
            m1(:,i) = m1(:,i) - m2(:,i);
        } else if (j==1) {
            m1(i,:) = m1(i,:) - m2(i,:);
        }
    }
    
    return m1;
}


## Raised Sine s-curve
# K. L. Kruse and C. T. Middlebrook, https://doi.org/10/ggp757
function sCurveRaisedSine(xv, dY) {
    dX = max(xv) - min(xv);
    return (dY/dX)*xv - (dY/(2*pi))*sin(2*pi*xv/dX);
}
# Derivative, analytical
function dRaisedSine(xv, dY) {
    dX = max(xv) - min(xv);
    return 2*dY*sin(pi*xv/dX)^2/dX;
}
# Curvature, via analytical y''/(1+y'^2)^3/2
function kRaisedSine(xv, dY) {
    dX = max(xv) - min(xv);
    z = sin(2*pi*xv/dX);
    return 2*dX*pi*z / (dX^2 + 4*dY^2*z^4)^1.5;
}


## Normalize a matrix
function normalize(v) {
    return v/max(v);
}
